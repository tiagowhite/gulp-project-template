doctype html
html(lang="en")
  include head
  body#tiagofernandes.home
    div.container
      div.box
        .loader
        .transition
        header
          div.name
            h1 TIAGO DE ARAUJO FERNANDES
          div.logo
            img(src="../img/logo0a.png" alt="Tiago de A. Fernandes" draggable="false")
          nav
            ul
              li
                a(href="#") WORK
              li
                a(href="#") ABOUT
      canvas#canvas
    include footer
  script(src='/js/vendor/three.js')
  script(src='/js/vendor/EffectComposer.js')
  script(src='/js/vendor/shaders/ShaderPass.js')
  script(src='/js/vendor/shaders/RenderPass.js')
  script(src='/js/vendor/shaders/CopyShader.js')
  script(src='/js/vendor/shaders/SepiaShader.js')
  script(src='/js/vendor/shaders/DigitalGlitch.js')
  script(src='/js/vendor/shaders/GlitchPass.js')


  script(type="text/javascript").
    function World() {
      this.constructor = function () {
        // this.scene = new THREE.Scene();
        // this.renderer = THREE.WebGLRenderer({canvas: document.getElementById('canvas'), antialias: true, alpha: true});
        // this.renderer.setClearColor(0x000000, 0);
        // this.resize();
        this.scene = new THREE.Scene();
        this.renderer = new THREE.WebGLRenderer({alpha: true});
        this.texture = new THREE.TextureLoader().load("../img/logo0a.png");
        this.renderer.setClearColor(0x000000, 0);
        this.composer = new THREE.EffectComposer(this.renderer);

        document.body.appendChild(this.renderer.domElement);
        this.resize();
        this.addObject();
        this.postProcessing();

        requestAnimationFrame(this.render.bind(this));
        window.addEventListener('resize', this.resize.bind(this));
      }

      this.addObject = function () {
        //var vertShader = document.getElementById('vertShader').innerHTML;
        //var fragShader = document.getElementById('fragShader').innerHTML;

        var material = new THREE.ShaderMaterial({transparent: true, map: this.texture});
        var geometry1 = new THREE.PlaneBufferGeometry(400, 300, 50);
        this.cube = new THREE.Mesh(geometry1, material);
        this.scene.add(this.cube);

      }

      this.postProcessing = function () {

        var renderPass = new THREE.RenderPass(this.scene, this.camera)
        this.composer.addPass(renderPass);

        var glitchPass = new THREE.GlitchPass(64);
        this.composer.addPass(glitchPass);

        //custom shader pass
        var myEffect = {
          uniforms: {
            "tDiffuse": {value: null},
            "amount": {value: 1.0}
          },
          vertexShader: [
            "varying vec2 vUv;",
            "void main() {",
            "vUv = uv;",
            "gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
            "}"
          ].join("\n"),
          fragmentShader: [
            "uniform float amount;",
            "uniform sampler2D tDiffuse;",
            "varying vec2 vUv;",
            "void main() {",
            "vec4 color = texture2D( tDiffuse, vUv );",
            "vec3 c = color.rgb;",
            "color.r = c.r * 2.0;",
            "color.g = c.g / 1.2;",
            "color.b = c.b;",
            "gl_FragColor = vec4( color.rgb , color.a );",
            "}"
          ].join("\n")
        }

        var maskPass = {
          uniforms: {
            "tDiffuse": { value: null},
            "tMask": { value: null}
          },
          vertexShader: [
            "varying vec2 vUv;",
            "void main() {",
            "vUv = uv;",
            "gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);",
            "}"
          ].
          join("\n"),
          fragmentShader: [
            "uniform sampler2D tDiffuse;",
            "uniform sampler2D tMask;",
            "varying vec2 vUv;",
            "void main() {",
            // get the current pixel color
            "vec4 texel = texture2D(tDiffuse, vUv);",
            // get alpha based on the color of the mask image
            "float alpha = texture2D(tMask, vUv).r;",
            // apply the alpha to the current pixel
            "gl_FragColor = texel * alpha;",
            "}"
          ].join("\n")
        };



        var customPass = new THREE.ShaderPass(myEffect);
        customPass.renderToScreen = true;
        this.composer.addPass(customPass);
        //
       // this.texture = new THREE.TextureLoader().load("../img/logo0a.png");
        var loader = new THREE.TextureLoader();
        loader.load('../img/logo0a.png', function (t) {
          t.minFilter = THREE.LinearFilter;
          t.magFilter = THREE.LinearFilter;
          maskPass.uniforms.tMask.value = t;
        });

        var mask = new THREE.ShaderPass(maskPass)
        mask.renderToScreen = true;

      }

      this.render = function () {
        requestAnimationFrame(this.render.bind(this));
        this.renderer.render(this.scene, this.camera);
        this.composer.render();

      }
      this.resize = function () {
        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        this.camera.position.z = 1000;

        this.renderer.setSize(window.innerWidth, window.innerHeight);
      }
    }
    var _w = new World();
    _w.constructor();



  script(src='/js/app.min.js')
